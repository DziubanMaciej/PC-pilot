// This file is autogenerated, do not try to change it manually
#pragma once

template <typename DerivingClass, unsigned int SIZE>
class Message {
public:
    using Byte = unsigned char;

protected:
    Byte bytes[SIZE];
    Message() {}
    Message(Byte *bytes) {
        std::memcpy(this->bytes, bytes, SIZE);
    }

    template <typename T, int offset>
    T getField() {
        static_assert(offset + sizeof(T) - 1 < SIZE, "invalid offset");
        T result;
        std::memcpy(&result, this->bytes + offset, sizeof(T));
        return result;
    }

    template <typename T, int offset>
    DerivingClass& setField(T field) {
        static_assert(offset + sizeof(T) - 1 < SIZE, "invalid offset");
        std::memcpy(this->bytes + offset, &field, sizeof(T));
        return *static_cast<DerivingClass*>(this);
    }
};


class ServerMessage : public Message<ServerMessage, 9> {
public:
    enum class Type : Byte {
        MoveCursor = 0,
        LeftPress = 1,
        LeftRelease = 2
    };

    Type getType() {
        return static_cast<Type>(getField<Byte, 0>());
    }

    // --- --- --- MoveCursor
    static ServerMessage createMessageMoveCursor(float x, float y) {
        return ServerMessage()
            .setField<Byte, 0>(static_cast<Byte>(Type::MoveCursor))
            .setField<float, 1>(x)
            .setField<float, 5>(y);
    }
    float getMessageMoveCursorX() {
        return getField<float, 1>();
    }
    float getMessageMoveCursorY() {
        return getField<float, 5>();
    }

    // --- --- --- LeftPress
    static ServerMessage createMessageLeftPress() {
        return ServerMessage()
            .setField<Byte, 0>(static_cast<Byte>(Type::LeftPress));
    }

    // --- --- --- LeftRelease
    static ServerMessage createMessageLeftRelease() {
        return ServerMessage()
            .setField<Byte, 0>(static_cast<Byte>(Type::LeftRelease));
    }
};



class ClientMessage : public Message<ClientMessage, 1> {
public:
    enum class Type : Byte {
        Connect = 0
    };

    Type getType() {
        return static_cast<Type>(getField<Byte, 0>());
    }

    // --- --- --- Connect
    static ClientMessage createMessageConnect() {
        return ClientMessage()
            .setField<Byte, 0>(static_cast<Byte>(Type::Connect));
    }
};


